// Code generated by entc, DO NOT EDIT.

package ent

import (
	"ECDICT-GO/ent/ecdict"
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// EcdictCreate is the builder for creating a Ecdict entity.
type EcdictCreate struct {
	config
	mutation *EcdictMutation
	hooks    []Hook
}

// SetWord sets the word field.
func (ec *EcdictCreate) SetWord(s string) *EcdictCreate {
	ec.mutation.SetWord(s)
	return ec
}

// SetSw sets the sw field.
func (ec *EcdictCreate) SetSw(s string) *EcdictCreate {
	ec.mutation.SetSw(s)
	return ec
}

// SetPhonetic sets the phonetic field.
func (ec *EcdictCreate) SetPhonetic(s string) *EcdictCreate {
	ec.mutation.SetPhonetic(s)
	return ec
}

// SetDefinition sets the definition field.
func (ec *EcdictCreate) SetDefinition(s string) *EcdictCreate {
	ec.mutation.SetDefinition(s)
	return ec
}

// SetTranslation sets the translation field.
func (ec *EcdictCreate) SetTranslation(s string) *EcdictCreate {
	ec.mutation.SetTranslation(s)
	return ec
}

// SetPos sets the pos field.
func (ec *EcdictCreate) SetPos(s string) *EcdictCreate {
	ec.mutation.SetPos(s)
	return ec
}

// SetCollins sets the collins field.
func (ec *EcdictCreate) SetCollins(i int) *EcdictCreate {
	ec.mutation.SetCollins(i)
	return ec
}

// SetOxford sets the oxford field.
func (ec *EcdictCreate) SetOxford(i int) *EcdictCreate {
	ec.mutation.SetOxford(i)
	return ec
}

// SetTag sets the tag field.
func (ec *EcdictCreate) SetTag(s string) *EcdictCreate {
	ec.mutation.SetTag(s)
	return ec
}

// SetBnc sets the bnc field.
func (ec *EcdictCreate) SetBnc(i int) *EcdictCreate {
	ec.mutation.SetBnc(i)
	return ec
}

// SetFrq sets the frq field.
func (ec *EcdictCreate) SetFrq(i int) *EcdictCreate {
	ec.mutation.SetFrq(i)
	return ec
}

// SetExchange sets the exchange field.
func (ec *EcdictCreate) SetExchange(s string) *EcdictCreate {
	ec.mutation.SetExchange(s)
	return ec
}

// SetDetail sets the detail field.
func (ec *EcdictCreate) SetDetail(s string) *EcdictCreate {
	ec.mutation.SetDetail(s)
	return ec
}

// SetAudio sets the audio field.
func (ec *EcdictCreate) SetAudio(s string) *EcdictCreate {
	ec.mutation.SetAudio(s)
	return ec
}

// Mutation returns the EcdictMutation object of the builder.
func (ec *EcdictCreate) Mutation() *EcdictMutation {
	return ec.mutation
}

// Save creates the Ecdict in the database.
func (ec *EcdictCreate) Save(ctx context.Context) (*Ecdict, error) {
	var (
		err  error
		node *Ecdict
	)
	if len(ec.hooks) == 0 {
		if err = ec.check(); err != nil {
			return nil, err
		}
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EcdictMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ec.check(); err != nil {
				return nil, err
			}
			ec.mutation = mutation
			node, err = ec.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			mut = ec.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ec.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EcdictCreate) SaveX(ctx context.Context) *Ecdict {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (ec *EcdictCreate) check() error {
	if _, ok := ec.mutation.Word(); !ok {
		return &ValidationError{Name: "word", err: errors.New("ent: missing required field \"word\"")}
	}
	if _, ok := ec.mutation.Sw(); !ok {
		return &ValidationError{Name: "sw", err: errors.New("ent: missing required field \"sw\"")}
	}
	if _, ok := ec.mutation.Phonetic(); !ok {
		return &ValidationError{Name: "phonetic", err: errors.New("ent: missing required field \"phonetic\"")}
	}
	if _, ok := ec.mutation.Definition(); !ok {
		return &ValidationError{Name: "definition", err: errors.New("ent: missing required field \"definition\"")}
	}
	if _, ok := ec.mutation.Translation(); !ok {
		return &ValidationError{Name: "translation", err: errors.New("ent: missing required field \"translation\"")}
	}
	if _, ok := ec.mutation.Pos(); !ok {
		return &ValidationError{Name: "pos", err: errors.New("ent: missing required field \"pos\"")}
	}
	if _, ok := ec.mutation.Collins(); !ok {
		return &ValidationError{Name: "collins", err: errors.New("ent: missing required field \"collins\"")}
	}
	if _, ok := ec.mutation.Oxford(); !ok {
		return &ValidationError{Name: "oxford", err: errors.New("ent: missing required field \"oxford\"")}
	}
	if _, ok := ec.mutation.Tag(); !ok {
		return &ValidationError{Name: "tag", err: errors.New("ent: missing required field \"tag\"")}
	}
	if _, ok := ec.mutation.Bnc(); !ok {
		return &ValidationError{Name: "bnc", err: errors.New("ent: missing required field \"bnc\"")}
	}
	if _, ok := ec.mutation.Frq(); !ok {
		return &ValidationError{Name: "frq", err: errors.New("ent: missing required field \"frq\"")}
	}
	if _, ok := ec.mutation.Exchange(); !ok {
		return &ValidationError{Name: "exchange", err: errors.New("ent: missing required field \"exchange\"")}
	}
	if _, ok := ec.mutation.Detail(); !ok {
		return &ValidationError{Name: "detail", err: errors.New("ent: missing required field \"detail\"")}
	}
	if _, ok := ec.mutation.Audio(); !ok {
		return &ValidationError{Name: "audio", err: errors.New("ent: missing required field \"audio\"")}
	}
	return nil
}

func (ec *EcdictCreate) sqlSave(ctx context.Context) (*Ecdict, error) {
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ec *EcdictCreate) createSpec() (*Ecdict, *sqlgraph.CreateSpec) {
	var (
		_node = &Ecdict{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ecdict.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ecdict.FieldID,
			},
		}
	)
	if value, ok := ec.mutation.Word(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldWord,
		})
		_node.Word = value
	}
	if value, ok := ec.mutation.Sw(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldSw,
		})
		_node.Sw = value
	}
	if value, ok := ec.mutation.Phonetic(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldPhonetic,
		})
		_node.Phonetic = value
	}
	if value, ok := ec.mutation.Definition(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldDefinition,
		})
		_node.Definition = value
	}
	if value, ok := ec.mutation.Translation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldTranslation,
		})
		_node.Translation = value
	}
	if value, ok := ec.mutation.Pos(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldPos,
		})
		_node.Pos = value
	}
	if value, ok := ec.mutation.Collins(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ecdict.FieldCollins,
		})
		_node.Collins = value
	}
	if value, ok := ec.mutation.Oxford(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ecdict.FieldOxford,
		})
		_node.Oxford = value
	}
	if value, ok := ec.mutation.Tag(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldTag,
		})
		_node.Tag = value
	}
	if value, ok := ec.mutation.Bnc(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ecdict.FieldBnc,
		})
		_node.Bnc = value
	}
	if value, ok := ec.mutation.Frq(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ecdict.FieldFrq,
		})
		_node.Frq = value
	}
	if value, ok := ec.mutation.Exchange(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldExchange,
		})
		_node.Exchange = value
	}
	if value, ok := ec.mutation.Detail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldDetail,
		})
		_node.Detail = value
	}
	if value, ok := ec.mutation.Audio(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldAudio,
		})
		_node.Audio = value
	}
	return _node, _spec
}

// EcdictCreateBulk is the builder for creating a bulk of Ecdict entities.
type EcdictCreateBulk struct {
	config
	builders []*EcdictCreate
}

// Save creates the Ecdict entities in the database.
func (ecb *EcdictCreateBulk) Save(ctx context.Context) ([]*Ecdict, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Ecdict, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EcdictMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (ecb *EcdictCreateBulk) SaveX(ctx context.Context) []*Ecdict {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
