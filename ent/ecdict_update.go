// Code generated by entc, DO NOT EDIT.

package ent

import (
	"ECDICT-GO/ent/ecdict"
	"ECDICT-GO/ent/predicate"
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// EcdictUpdate is the builder for updating Ecdict entities.
type EcdictUpdate struct {
	config
	hooks    []Hook
	mutation *EcdictMutation
}

// Where adds a new predicate for the builder.
func (eu *EcdictUpdate) Where(ps ...predicate.Ecdict) *EcdictUpdate {
	eu.mutation.predicates = append(eu.mutation.predicates, ps...)
	return eu
}

// SetWord sets the word field.
func (eu *EcdictUpdate) SetWord(s string) *EcdictUpdate {
	eu.mutation.SetWord(s)
	return eu
}

// SetSw sets the sw field.
func (eu *EcdictUpdate) SetSw(s string) *EcdictUpdate {
	eu.mutation.SetSw(s)
	return eu
}

// SetPhonetic sets the phonetic field.
func (eu *EcdictUpdate) SetPhonetic(s string) *EcdictUpdate {
	eu.mutation.SetPhonetic(s)
	return eu
}

// SetDefinition sets the definition field.
func (eu *EcdictUpdate) SetDefinition(s string) *EcdictUpdate {
	eu.mutation.SetDefinition(s)
	return eu
}

// SetTranslation sets the translation field.
func (eu *EcdictUpdate) SetTranslation(s string) *EcdictUpdate {
	eu.mutation.SetTranslation(s)
	return eu
}

// SetPos sets the pos field.
func (eu *EcdictUpdate) SetPos(s string) *EcdictUpdate {
	eu.mutation.SetPos(s)
	return eu
}

// SetCollins sets the collins field.
func (eu *EcdictUpdate) SetCollins(i int) *EcdictUpdate {
	eu.mutation.ResetCollins()
	eu.mutation.SetCollins(i)
	return eu
}

// AddCollins adds i to collins.
func (eu *EcdictUpdate) AddCollins(i int) *EcdictUpdate {
	eu.mutation.AddCollins(i)
	return eu
}

// SetOxford sets the oxford field.
func (eu *EcdictUpdate) SetOxford(i int) *EcdictUpdate {
	eu.mutation.ResetOxford()
	eu.mutation.SetOxford(i)
	return eu
}

// AddOxford adds i to oxford.
func (eu *EcdictUpdate) AddOxford(i int) *EcdictUpdate {
	eu.mutation.AddOxford(i)
	return eu
}

// SetTag sets the tag field.
func (eu *EcdictUpdate) SetTag(s string) *EcdictUpdate {
	eu.mutation.SetTag(s)
	return eu
}

// SetBnc sets the bnc field.
func (eu *EcdictUpdate) SetBnc(i int) *EcdictUpdate {
	eu.mutation.ResetBnc()
	eu.mutation.SetBnc(i)
	return eu
}

// AddBnc adds i to bnc.
func (eu *EcdictUpdate) AddBnc(i int) *EcdictUpdate {
	eu.mutation.AddBnc(i)
	return eu
}

// SetFrq sets the frq field.
func (eu *EcdictUpdate) SetFrq(i int) *EcdictUpdate {
	eu.mutation.ResetFrq()
	eu.mutation.SetFrq(i)
	return eu
}

// AddFrq adds i to frq.
func (eu *EcdictUpdate) AddFrq(i int) *EcdictUpdate {
	eu.mutation.AddFrq(i)
	return eu
}

// SetExchange sets the exchange field.
func (eu *EcdictUpdate) SetExchange(s string) *EcdictUpdate {
	eu.mutation.SetExchange(s)
	return eu
}

// SetDetail sets the detail field.
func (eu *EcdictUpdate) SetDetail(s string) *EcdictUpdate {
	eu.mutation.SetDetail(s)
	return eu
}

// SetAudio sets the audio field.
func (eu *EcdictUpdate) SetAudio(s string) *EcdictUpdate {
	eu.mutation.SetAudio(s)
	return eu
}

// Mutation returns the EcdictMutation object of the builder.
func (eu *EcdictUpdate) Mutation() *EcdictMutation {
	return eu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (eu *EcdictUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EcdictMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EcdictUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EcdictUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EcdictUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EcdictUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ecdict.Table,
			Columns: ecdict.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ecdict.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.Word(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldWord,
		})
	}
	if value, ok := eu.mutation.Sw(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldSw,
		})
	}
	if value, ok := eu.mutation.Phonetic(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldPhonetic,
		})
	}
	if value, ok := eu.mutation.Definition(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldDefinition,
		})
	}
	if value, ok := eu.mutation.Translation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldTranslation,
		})
	}
	if value, ok := eu.mutation.Pos(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldPos,
		})
	}
	if value, ok := eu.mutation.Collins(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ecdict.FieldCollins,
		})
	}
	if value, ok := eu.mutation.AddedCollins(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ecdict.FieldCollins,
		})
	}
	if value, ok := eu.mutation.Oxford(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ecdict.FieldOxford,
		})
	}
	if value, ok := eu.mutation.AddedOxford(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ecdict.FieldOxford,
		})
	}
	if value, ok := eu.mutation.Tag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldTag,
		})
	}
	if value, ok := eu.mutation.Bnc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ecdict.FieldBnc,
		})
	}
	if value, ok := eu.mutation.AddedBnc(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ecdict.FieldBnc,
		})
	}
	if value, ok := eu.mutation.Frq(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ecdict.FieldFrq,
		})
	}
	if value, ok := eu.mutation.AddedFrq(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ecdict.FieldFrq,
		})
	}
	if value, ok := eu.mutation.Exchange(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldExchange,
		})
	}
	if value, ok := eu.mutation.Detail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldDetail,
		})
	}
	if value, ok := eu.mutation.Audio(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldAudio,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ecdict.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EcdictUpdateOne is the builder for updating a single Ecdict entity.
type EcdictUpdateOne struct {
	config
	hooks    []Hook
	mutation *EcdictMutation
}

// SetWord sets the word field.
func (euo *EcdictUpdateOne) SetWord(s string) *EcdictUpdateOne {
	euo.mutation.SetWord(s)
	return euo
}

// SetSw sets the sw field.
func (euo *EcdictUpdateOne) SetSw(s string) *EcdictUpdateOne {
	euo.mutation.SetSw(s)
	return euo
}

// SetPhonetic sets the phonetic field.
func (euo *EcdictUpdateOne) SetPhonetic(s string) *EcdictUpdateOne {
	euo.mutation.SetPhonetic(s)
	return euo
}

// SetDefinition sets the definition field.
func (euo *EcdictUpdateOne) SetDefinition(s string) *EcdictUpdateOne {
	euo.mutation.SetDefinition(s)
	return euo
}

// SetTranslation sets the translation field.
func (euo *EcdictUpdateOne) SetTranslation(s string) *EcdictUpdateOne {
	euo.mutation.SetTranslation(s)
	return euo
}

// SetPos sets the pos field.
func (euo *EcdictUpdateOne) SetPos(s string) *EcdictUpdateOne {
	euo.mutation.SetPos(s)
	return euo
}

// SetCollins sets the collins field.
func (euo *EcdictUpdateOne) SetCollins(i int) *EcdictUpdateOne {
	euo.mutation.ResetCollins()
	euo.mutation.SetCollins(i)
	return euo
}

// AddCollins adds i to collins.
func (euo *EcdictUpdateOne) AddCollins(i int) *EcdictUpdateOne {
	euo.mutation.AddCollins(i)
	return euo
}

// SetOxford sets the oxford field.
func (euo *EcdictUpdateOne) SetOxford(i int) *EcdictUpdateOne {
	euo.mutation.ResetOxford()
	euo.mutation.SetOxford(i)
	return euo
}

// AddOxford adds i to oxford.
func (euo *EcdictUpdateOne) AddOxford(i int) *EcdictUpdateOne {
	euo.mutation.AddOxford(i)
	return euo
}

// SetTag sets the tag field.
func (euo *EcdictUpdateOne) SetTag(s string) *EcdictUpdateOne {
	euo.mutation.SetTag(s)
	return euo
}

// SetBnc sets the bnc field.
func (euo *EcdictUpdateOne) SetBnc(i int) *EcdictUpdateOne {
	euo.mutation.ResetBnc()
	euo.mutation.SetBnc(i)
	return euo
}

// AddBnc adds i to bnc.
func (euo *EcdictUpdateOne) AddBnc(i int) *EcdictUpdateOne {
	euo.mutation.AddBnc(i)
	return euo
}

// SetFrq sets the frq field.
func (euo *EcdictUpdateOne) SetFrq(i int) *EcdictUpdateOne {
	euo.mutation.ResetFrq()
	euo.mutation.SetFrq(i)
	return euo
}

// AddFrq adds i to frq.
func (euo *EcdictUpdateOne) AddFrq(i int) *EcdictUpdateOne {
	euo.mutation.AddFrq(i)
	return euo
}

// SetExchange sets the exchange field.
func (euo *EcdictUpdateOne) SetExchange(s string) *EcdictUpdateOne {
	euo.mutation.SetExchange(s)
	return euo
}

// SetDetail sets the detail field.
func (euo *EcdictUpdateOne) SetDetail(s string) *EcdictUpdateOne {
	euo.mutation.SetDetail(s)
	return euo
}

// SetAudio sets the audio field.
func (euo *EcdictUpdateOne) SetAudio(s string) *EcdictUpdateOne {
	euo.mutation.SetAudio(s)
	return euo
}

// Mutation returns the EcdictMutation object of the builder.
func (euo *EcdictUpdateOne) Mutation() *EcdictMutation {
	return euo.mutation
}

// Save executes the query and returns the updated entity.
func (euo *EcdictUpdateOne) Save(ctx context.Context) (*Ecdict, error) {
	var (
		err  error
		node *Ecdict
	)
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EcdictMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EcdictUpdateOne) SaveX(ctx context.Context) *Ecdict {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EcdictUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EcdictUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EcdictUpdateOne) sqlSave(ctx context.Context) (_node *Ecdict, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ecdict.Table,
			Columns: ecdict.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ecdict.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Ecdict.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := euo.mutation.Word(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldWord,
		})
	}
	if value, ok := euo.mutation.Sw(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldSw,
		})
	}
	if value, ok := euo.mutation.Phonetic(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldPhonetic,
		})
	}
	if value, ok := euo.mutation.Definition(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldDefinition,
		})
	}
	if value, ok := euo.mutation.Translation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldTranslation,
		})
	}
	if value, ok := euo.mutation.Pos(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldPos,
		})
	}
	if value, ok := euo.mutation.Collins(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ecdict.FieldCollins,
		})
	}
	if value, ok := euo.mutation.AddedCollins(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ecdict.FieldCollins,
		})
	}
	if value, ok := euo.mutation.Oxford(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ecdict.FieldOxford,
		})
	}
	if value, ok := euo.mutation.AddedOxford(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ecdict.FieldOxford,
		})
	}
	if value, ok := euo.mutation.Tag(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldTag,
		})
	}
	if value, ok := euo.mutation.Bnc(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ecdict.FieldBnc,
		})
	}
	if value, ok := euo.mutation.AddedBnc(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ecdict.FieldBnc,
		})
	}
	if value, ok := euo.mutation.Frq(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ecdict.FieldFrq,
		})
	}
	if value, ok := euo.mutation.AddedFrq(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: ecdict.FieldFrq,
		})
	}
	if value, ok := euo.mutation.Exchange(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldExchange,
		})
	}
	if value, ok := euo.mutation.Detail(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldDetail,
		})
	}
	if value, ok := euo.mutation.Audio(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ecdict.FieldAudio,
		})
	}
	_node = &Ecdict{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ecdict.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
